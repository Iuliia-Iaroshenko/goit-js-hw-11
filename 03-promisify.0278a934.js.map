{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAEA,MAAMA,EAAQC,GACH,IAAIC,QAASC,IAClBC,WAAY,KAAQD,EAAUF,IAC3BA,KAKDI,EAASC,GAAQC,QAAQC,sBAAsBF,OAErDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAInB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGtBC,EAAkB,CAACC,EAAUC,KACzBC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAEpD,OAAA,IAAIhB,QAASC,IACZa,GACAb,EAAUa,MAKxBH,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAI7C,MAAMC,EAA4B,CAACC,EAAKC,IAC9BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IACjB3B,MAAAA,EAAQoB,EAA0B,IAAK,KAEtC,OAAA,IAAIlB,QAAS,CAACC,EAAUyB,KAC3BxB,WAAW,KACYmB,KAAKE,SAAW,GAG/BtB,EAAS,CAAE0B,GAAIF,EAAYE,GAAIvB,KAAMN,IAErC4B,EAAOD,EAAYE,KAEtB7B,MAIL8B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAK/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAAMxB,KAAKqB,GAAYI,MAAMH,GAC/DL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH","file":"03-promisify.0278a934.js","sourceRoot":"../src","sourcesContent":["// Подзадание 1\n\nconst delay = ms => {\n    return new Promise (resolved => {\n      setTimeout (() => { resolved (ms)\n      }, ms)\n  \n    });\n  };\n  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n   //Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms\n\n// Подзадание 2\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n  ];\n  \nconst toggleUserState = (allUsers, username) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user\n    );\n        return new Promise (resolved => {\n            if (updatedUsers) {\n                resolved (updatedUsers);\n            }\n        })\n  };\n  // The function should work like this\n  toggleUserState(users, 'Mango').then(console.table);\n  toggleUserState(users, 'Ajax').then(console.table);\n\n// Подзадание 3\n\n const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n  \n    return new Promise ((resolved, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n        \n            if (canProcess) {\n                resolved({ id: transaction.id, time: delay });\n            } else {\n                reject(transaction.id);\n            }\n          }, delay);\n    });\n  };\n  \n  const logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  \n  // The function should work like this\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}